[[{"l":"Introduction"},{"i":"quest-ce-que-powershell-","l":"Qu'est ce que Powershell ?","p":["Powershell est avant tout un shell, c’est-à-dire une interface utilisateur permettant de traduire les commandes utilisateurs en exécution au niveau du système."]},{"i":"pourquoi-se-former-à-powershell-","l":"Pourquoi se former à Powershell ?","p":["Intéropérable avec l'ensemble de l'écosystème Microsoft, des APIs tierce, etc...","Productivité: Une action manuelle sur un élément prendra plus de temps que cette même action sur 1000 éléments en Powershell.","Standardisation: Une fois le code établi, son action sera toujours la même, sans oublis ou mauvaise manipulation"]}],[{"l":"Exécuter des commandes"},{"l":"Syntaxe des commandes","p":["Syntax Toutes les commandes PowerShell, appelés CmdLets se composent d’un verbe et d’un nom séparé par un tiret. Le résultat de la commande peut être influencer par l'ajout de paramètres.","Par exemple, la commande Get-Service exécutée telle quelle, renverra l'ensemble des services.","Tandis que la commande Get-Service -Name *Net* ne renverra que les services contenant net dans leur nom.","Chaque verbe correspond à un type d'action précis :","Verb","Action","Requeter","Configurer / Définir","Importer","etc.","...","permet d'obtenir la liste des verbs approuvés par les best-practices Powershell"]},{"l":"Les 3 commandes indispensables"},{"l":"Get-Command","p":["permet de rechercher une commande en fonction de nom, de son verb ou de son module d'appartenance."]},{"l":"Get-Help","p":["La commande permet d'obtenir une aide sur le fonctionnement d'une commande.","Elle vous permet d'identifier les paramètres attendues, lesquels sont obligatoires ou non, le type de valeurs à leur envoyer, etc ...","L'ajout du paramètre -Online à la commande Get-Help vous envoie sur la page Microsoft Docs correspondante."]},{"l":"Get-Member","p":["vous permet d'obtenir \"la carte d'identité\" d'un objet obtenu par l'éxécution d'une commande ou stockée dans une variable. Elle vous permettra de connaitre:","Son type","Ses propriétés","Ses méthodes","Commande","Description","Lister et chercher des commandes","Obtenir l'aide d'une commande","Connaitre le type, les propriétés et les méthodes d’un objet"]}],[{"i":"pipeline--objets","l":"Pipeline & Objets"},{"l":"Language Objet","p":["Contrairement à Batch ou Bash qui sont des langages dit « textes », Powershell est un langage objet.","Sous PowerShell, chaque commande renverra un objet d’un type précis possédant ses propriétés et ses méthodes."]},{"l":"Le Pipeline","p":["Le pipeline, symbolisée par le caractère permet de chainer plusieurs commandes entre elles.","Autrement dit, la sortie d'une commande correspond à l' entrée de la suivante.","Les valeurs des paramètres de la deuxième commande lui sont fourni par la première commande."]}],[{"l":"Les variables","p":["La variable est un emplacement mémoire. Elle se compose de 3 éléments :","Un nom","Un type","Une valeur","Sous PowerShell, une variable est précédée du signe :","Le contenu d'une variable peut être une valeur unique, ou une collection d'objets"]},{"l":"Assignation de variables","p":["L'assignation d'une variable se fait avec le symbole","Le résultat d'une commande peut être stocké dans une variable de la même manière","Powershell détermine le type de la variable en fonction de la syntaxe avec laquelle elle est définie"]},{"l":"Forcer le typage","p":["Il peut être néccéssaire d'avoir à forcer le type d'une variable. Pour cela on précise le type voulu entre avant le nom de la variable."]},{"l":"Propriétés et méthodes","p":["Les propriétés et les méthodes de l'objet stocké en variable pourront être appelé par un"]},{"l":"Utilisation dans une commande","p":["Une variable ou seulement ses propriétés pourront être utilisés dans une commande","La syntaxe $($variable.propriete) empêche que la variable ne soit interprété comme une composante de la chaîne de caractère."]}],[{"l":"Array","p":["Une array est une liste de valeur"]},{"l":"Indexage dans une liste"}],[{"l":"Hashtable","p":["Une Hashtable est un tableau de correspondance clé/valeur","Les valeurs peuvent alors être appelés en utilisant leur clé","Ou comme pour appelé la propriété d'un objet"]}],[{"l":"PSCustomObject","p":["Le PSCustomObject permet la création d'un objet personnalisé dans lequel on pourra définire l'ensemble de ses propriétés","Il est possible de compléter l'objet via l'utilisation de la commande Add-Member","Les propriétés peuvent alors être appelés comme n'importe quel autre objet"]}],[{"l":"Variables automatiques","p":["Commande","Description","$?","Contient le statut de la dernière commande. true si éxécutée avec succés, false si elle a échouée","$null","Remprésente une valeur nulle ou indéfinie. Peut-être utilisée pour vider une variable ou envoyer le résultat d'une commande dans un \"trou-noir\"","$error","Contient la liste des erreurs rencontrées dans la session. $Error[0] étant la dernière erreur","$true$false","Représente les valeurs booléenne logique"]}],[{"l":"Comparer des nombres","p":["Commande","Description","2 -eq 2","Egal","2 -ne 4","N'est pas égal","5 -gt 2","Plus grand que","5 -ge 5","Plus grand ou égale","5 -lt 10","Plus petit que","5 -lt 5","Plus petit ou égale"]}],[{"l":"Comparer des chaînes de caractères"},{"i":"egalité--eq","l":"Egalité (-eq)"},{"i":"wildcard--like","l":"Wildcard (-like)"},{"i":"match--match","l":"Match (-match)","p":["-match permet aussi d'utiliser le format Regex pour comparer un format de chaîne attendu avec une valeur:"]},{"i":"présence--contains","l":"Présence (-contains)","p":["-contains permet de vérifier la présence d'une valeur dans une liste","Ces opérateurs, précédés de la lettre ( -ceq, -clike, … ) rend la comparaison sensible à la case","Ces opérateurs, précédés ( -notlike, -notmatch, … ) inverse la comparaison"]}],[{"l":"Opérateurs logiques","p":["Commande","Description","-and","ET","-or","OU","-not","N'est pas ou n'existe pas","-xor","OU Exclusif [\"Le résultat n'est vrai que si une et une seule des valeurs est vrai\"]"]}],[{"l":"Manipuler des chaînes de caractères"},{"i":"remplacer--replace","l":"Remplacer (-replace)"},{"i":"séparer--split","l":"Séparer (-split)","p":["Le résulat obtenu est une array(liste) d'objet de type string"]},{"i":"joindre--join","l":"Joindre (-join)"}],[{"l":"Opérateurs Arithmétiques","p":["$Var -= 2","$Var *= 2","$Var /= 2","$Var + 2","$Var += 2","$Var = 1","$Var--","$Var++","Additionne","Assigne une valeur","Commande","Décrémente","Décrémente par la valeur fournie","Description","Divise par la valeur fournie","Incrémente","Incrémente par la valeur fournie","Multiplie par la valeur fournie"]}],[{"l":"Opérateur de type","p":["Commande","Exemple","Description","-is","99 -is int","Compare le type de l'objet founi et retourne true si égal","-isnot","99 -isnot int","Compare le type de l'objet founi et retourne false si égal","-as","01/09/23 -as [datetime]","Converti la valeur fourni dans un type donnée. Renvoie une erreur si la conversion est impossible","L'opérateur -as peut aussi permettre de vérifier qu'une donnée est correctement formatée:","Cette commande renvoie un objet de type ipaddress","Cette commande ne renverra rien, permettant d'en déduire que le format d'entrée est incorrect."]}],[{"l":"Where-Object","p":["permet de trier une collection pour n'afficher que ceux répondant à des conditions précises."]}],[{"l":"Select-Object","p":["permet de ne sélectionner que certaines propriétés de l'objet ou d'en créer de nouvelles."]},{"i":"afficher-lensemble-des-propriétés","l":"Afficher l'ensemble des propriétés","p":["Select-Object * permettra de renvoyer l'intégralité des propriétés et leur valeurs d'un objet, même si la commande ne les renvoient pas de base."]},{"l":"Créer une propriété custom"},{"l":"Limiter un résultat","p":["Select-Object possède des paramètres -First et --Last pour ne récupérer qu'un certain nombres d'objets dans une collection."]}],[{"l":"Sort-Object","p":["permet de trier une collection d'objet en fonction de la valeur de ses propriétés","Pour inverser l'ordre:"]}],[{"l":"Group-Object","p":["permet de regrouper les objets d'une collection en fonction de la valeur d'une de leur propriétés. Cette commande renvoie un nouvel objet de type groupinfo"]}],[{"l":"Foreach-Object","p":["permet de réaliser une opération pour chaque objet d'une collection"]},{"l":"Exemples","p":["Créer un fichier readme.txt dans chaque sous-dossier du disque E","Pinger plusieurs hostname à la suite"]}],[{"l":"Compare-Object","p":["permet de comparer deux collections d'objets.","Lorsque vous utilisez le paramètre -PassThru, le type de l’objet n’est pas modifié"]}],[{"i":"exportation--importation","l":"Exportation / Importation"},{"l":"Fichier brut"},{"l":"Out-File","p":["permet d'exporter dans un fichier brut le contenu du pipeline."]},{"l":"Get-Content","p":["permet de faire l'action inverse et d'importer le contenu d'un fichier brut"]},{"l":"JSON"},{"l":"ConvertTo-Json","p":["permet de convertir le contenu du pipeline au format JSON"]},{"l":"ConvertFrom-Json","p":["permet de faire l'action inverse et de convertir la syntaxe Json en objet powershell.","ne prend pas de fichier en entrée mais un objet de type string respectant la syntaxe Json. Cet objet pourra être obtenu depuis un fichier ( Get-Content), une RestAPI ( Invoke-WebRequest), ..."]},{"l":"CSV"},{"l":"Export-CSV","p":["permet d'exporter le contenu du pipeline dans un fichier CSV","Le paramètre -IncludeTypeInformation permet de rajouter un entête au fichier pour conserver le type de l'objet lors de son importation","Le paramètre -Delimiter permet précisier le caractère de séparation ,, ;... Le même devra être choisi lors de l'importation."]},{"l":"Import CSV","p":["permet de faire l'action inverse et d'importe le contenu d'un fichier CSV"]},{"l":"XML"},{"l":"Export-CliXML","p":["pPermet d’exporter le contenu du pipeline dans un fichier XML. En concervant le type, les propriétés et les méthodes de l’objet."]},{"l":"Import-CliXML","p":["permet de faire l'action inverse et d'importe le contenu d'un fichier XML"]}],[{"l":"Scripts et Fonctions"},{"l":"Différences","p":["Un script est un enchainement de multiples commandes, actions et opérations permettant l’automatisation d’un processus complexe.","Une fonction ne doit avoir qu’un seul et unique but réutilisable et transposable dans différents scripts et contexte."]}],[{"l":"Scripts","p":["Un script est un fichier texte au format .ps1 contenant un enchaînement de commande, de structures et de fonctions.","Un script peut accepter des paramètres en entrée:"]},{"l":"Éxécution"},{"i":"depuis-lexplorateur","l":"Depuis l'explorateur:"},{"i":"depuis-la-console-ou-depuis-un-autre-script","l":"Depuis la console ou depuis un autre script:","p":[".\\nomduscript.ps1"]},{"i":"depuis-un-autre-script","l":"Depuis un autre script:","p":["L'éxécution du script en DotSourcing(avec le .) permet de conserver le contexte du script dans le contexte d'exécution ( Les variables ne disparaitront pas à la fin de l'éxécution )"]},{"l":"Execution Policy","p":["Powershell intègre une sécurité qui permet de contrôler l'éxécution des scripts sur la machine.","permet de connaitre les stratégies d'éxécution sur la machine.","Description","Restricted","Aucune exécution de script possible","All Signed","Tous les scripts doivent être signés par un certificat valide","Remote Signed","Les scripts téléchargés depuis Internet doivent être signés par un certificat valide","ByPass","Aucune restriction"]}],[{"l":"Fonctions","p":["Une fonction est un morceau de code nommé.","Une fois exécutée, la fonction est chargée en mémoire dans la session Powershell en cours. Elle devient une commande disponible comme les autres.","Une fonction est définie par le mot clé function, un nom et optionnellement, des paramètres.","Si vous répétez au moins deux fois un ensemble de commande pour une même opération. C'est que vous devez en faire une fonction."]},{"l":"Les paramètres"},{"i":"quick-and-dirty","l":"Quick and dirty \uD83D\uDCA9","p":["Cette syntaxe de base ne permet pas le contrôle des valeurs de paramètres entrés, de leur type, il ne permet pas non plus de les rendre obligatoires.","L'ordre des paramètres lors du lancement de la commandes sera le même que l'ordre dans lequel ils ont étés déclarés dans la fonction.","Cette fonction pourra donc être appelés de ces deux façons:"]},{"i":"advanced-and-clean","l":"Advanced and clean \uD83D\uDC4D","p":["Nous ajoutons ici à nos déclarations de paramètres plusieurs élements:"]},{"l":"Attributs de paramètres","p":["Ils permettent d'ajuster le comportement du paramètres. Par exemple ici, le paramètres sera obligatoire mandatory=$true, et dans le cas ou le nom du paramètres ne sera pas spécifié lors de l'appel de la fonction, il devra se trouver en première position Position=0."]},{"l":"CmdLetBinding","p":["Le mot clé CmdLetBinding() permet l'ajout à votre fonction des paramètres communs à toute les commandes Powershell","Paramètres","Description","-Verbose","Permet d'afficher le retour Verbose de la commande","-ErrorAction","Permet de définir le comportement attendu en cas d'erreur dans la commande","D'autres common parameters sont disponibles pour une utilisation plus avancée: https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/common-parameter-names?view=powershell-7.3"]},{"i":"fonctions-avancées--intégration-au-pipeline","l":"Fonctions avancées : Intégration au pipeline","p":["Une fonction avancée qui pourra recevoir les objets avec lesquels interagir depuis le pipeline","ValueFromPipeline = $true permet à la commande d'être appelé à la droite du pipeline","ValueFromPipelineByPropertyName = $true permet à la commande de prendre comme valeur de paramètre, la propriété des objets reçu possédant le même nom (ou alias)","Le bloc begin sera exécuté une fois au début","Le bloc process sera exécuté autant de fois qu'il y a d'objets dans la collection envoyé dans le pipeline.","Le bloc end sera exécuté une fois à la fin"]},{"l":"Retour de la fonction","p":["Une fonction (ou un script) retournera indifférement:","Tout objet qui sera pas enregistré dans une variable.","Tout objet renvoyé par la commande .","Tout objets renvoyé par le mot clé return","Le mot clé return mettra fin immédiatement à l'éxécution du script ou de la fonction dans lequel il est appelé."]}],[{"l":"Les structures"},{"l":"IF-ELSE-ELSEIF","p":["Le bloc permet l'éxécution d'un bloc de code uniquement dans le cas où une condition est remplie.","Le bloc permet de rajouter une condition.","Les blocs et ne sont pas obligatoire à la suite d'un bloc"]},{"l":"FOREACH","p":["A l'instar de la commande. permet de répéter une action pour chaque éléments d'une collection d'objets.","Ici est la variable contenant la collection à parcourir, tandis que représente l'élément unique de cette collection, dont la valeur changera à chaque itération de la boucle.","La boucle Foreach est trés utile pour générer rapidement une collection d'objets de type pscustomobject"]},{"l":"WHILE","p":["Le bloc permet d'éxécuter le bloc de code tant qu'une condition est remplie."]},{"l":"DO-WHILE","p":["Le bloc est identique au bloc mais vérifie la condition à la fin, le bloc de code s'éxécutera donc au mininum une fois."]},{"l":"DO-UNTIL","p":["Le bloc est identique au bloc mais s'éxécutera jusqu'à ce que la condition soit vraie. Elle s'éxécutera donc tant que la condition est fausse."]},{"l":"SWITCH","p":["Le bloc permet d'éxécuter un bloc de code en fonction de plusieurs cas de figure.","En ajoutant le paramètre -WildCard Le bloc permet d'accepter des caractères wildcard et regex dans la condition"]},{"i":"les-opérateurs-break--continue","l":"Les Opérateurs Break / Continue"},{"l":"continue","p":["L'opérateur fonctionne à l'intérieur d'une boucle (for, foreach, while and do). Il permet de passer l'itération en cours de la boucle sans l'arrêter."]},{"l":"break","p":["L'opérateur fonctionne à l'intérieur d'une boucle (for, foreach, while and do). Il permet d'arrêter immédiatement le fonctionnement de la boucle.","Ce code va compter les chiffres de 1 à 15 mais va s'arrêter arrivé au chiffre 7.","peut aussi être appelé à n'importe quel endroit d'un fichier de script. Il arrêtera alors l'exécution du script en lui même."]}],[{"l":"Remote Powershell","p":["A l'instar de SSH sur un système Unix, Powershell permet l'ouverture de session distante et l'exécution sur des machines distantes."]},{"l":"Activer Remote Powershell sur une machine cliente"},{"l":"Ouvrir une session interactive sur une machine cliente","p":["Il est possible d'ouvrir une session Remote Powershell et de l'enregistrer au sein d'une variable pour l'utiliser dans les commandes possédant un paramètre -session"]}],[{"l":"Credentials","p":["permet l'enregistrement dans une variable des données d'authentification qui pourront être ensuite envoyé aux commandes ayant un paramètre -Credential","La commande s'éxécutera alors avec les droits de l'utilisateur renseigné dans la variables"]}],[{"l":"Les Modules","p":["Un module Powershell est une bibliothèque de commandes (fonctions) dédié à la gestion ou l'administration d'un élément précis (Application / Api / Rôle Windows Server / ...).","La liste des modules installés sur la machine s'obtient grâce à la commande","Depuis Powershell v.3, le chargement d'un module est automatique lorsque l'on appelle une commande qu'il contient. Mais le chargement peut-être forcé grâce à la commande","La liste des commandes d'un module s'obtient via un paramètre de la commande"]},{"l":"Rechercher des modules","p":["Microsoft met à disposition un repository public permettant aux particulier comme au professionnels de mettre à disposition des modules Powershell.","permet de rechercher des modules ( par defaut dans le repository Microsoft)"]},{"l":"Installer des modules","p":["permet d'installer des modules","Le repository Microsoft peut être parcouru depuis un navigateur sur PowerShell Gallery"]}],[{"l":"Cmd vs powershell","p":["Même si l'habitude rends l'utilisation des commandes DOS native plus rapide, il est important de noter que l'utilisation de leur équivalent Powershell, comme toutes les commandes Powershell renvoie un objet permettant une utilisation plus fine du résultat."]},{"l":"ipconfig"},{"l":"ping"},{"l":"telnet"},{"l":"tracert"},{"l":"nslookup"},{"i":"nslookup-1","l":"nslookup"},{"l":"net share"}],[{"l":"Exercice 1","p":["Recherchez la commande permettant de récupérer les infos d'un disque dur.","En utilisant un paramètre de cette commande, n'affichez que le disque 0","N’affichez que la propriété permettant de déterminer si il s’agit du disque System"]}],[{"l":"Exercice 2","p":["Obtenez une liste de 10 nombres aléatoires (random)","Enregistrer dans une variable uniquement le 5ème nombre de cette liste"]}],[{"l":"Exercice 3","p":["Affichez toutes les commandes commancant par Remove","Combien y en a-t-il ? (Non, ne comptez pas à la main \uD83D\uDE04)"]}],[{"l":"Exercice 4","p":["Lister, dans l'ordre décroissant, les 5 processus utilisant le plus de CPU"]}],[{"l":"Exercice 5","p":["En une ligne, créez 10 fichiers numérotés","1..10 vous permez de générer une liste d'objet de type ìnt de 1 à 10","vous permez de créer des fichiers."]}],[{"l":"Exercice 6","p":["Sélectionnez les process avec un ID inférieur à 1000"]}]]