{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#quest-ce-que-powershell","title":"Qu'est ce que Powershell ?","text":"<p>Powershell est avant tout un shell, c\u2019est-\u00e0-dire une interface utilisateur permettant de traduire les commandes utilisateurs en ex\u00e9cution au niveau du syst\u00e8me.</p>"},{"location":"#pourquoi-se-former-a-powershell","title":"Pourquoi se former \u00e0 Powershell ?","text":"<ul> <li> <p> Int\u00e9rop\u00e9rable avec l'ensemble de l'\u00e9cosyst\u00e8me Microsoft, des APIs tierce, etc...</p> </li> <li> <p> Productivit\u00e9: Une action manuelle sur un \u00e9l\u00e9ment prendra plus de temps que cette m\u00eame action sur 1000 \u00e9l\u00e9ments en Powershell.</p> </li> <li> <p> Standardisation: Une fois le code \u00e9tabli, son action sera toujours la m\u00eame, sans oublis ou mauvaise manipulation</p> </li> </ul>"},{"location":"pipeline_and_objets/","title":"Pipeline &amp; Objets","text":""},{"location":"pipeline_and_objets/#language-objet","title":"Language Objet","text":"<ul> <li> <p>Contrairement \u00e0 Batch ou Bash qui sont des langages dit \u00ab\u00a0textes\u00a0\u00bb, Powershell est un langage objet.</p> </li> <li> <p>Sous PowerShell, chaque commande renverra un objet d\u2019un type pr\u00e9cis poss\u00e9dant ses propri\u00e9t\u00e9s et ses m\u00e9thodes.</p> </li> </ul> <p></p>"},{"location":"pipeline_and_objets/#le-pipeline","title":"Le Pipeline","text":"<ul> <li> <p>Le pipeline, symbolis\u00e9e par le caract\u00e8re | ( AltGr+6 ) permet de chainer plusieurs commandes entre elles.</p> </li> <li> <p>Autrement dit, la sortie d'une commande correspond \u00e0 l'entr\u00e9e de la suivante.</p> </li> <li> <p>Les valeurs des param\u00e8tres de la deuxi\u00e8me commande lui sont fourni par la premi\u00e8re commande.</p> </li> </ul> <pre><code>Get-Process  -Name\u00a0notepad\nStop-Process -Name notepad\n</code></pre> <pre><code>Get-Process  -Name\u00a0notepad\u00a0| Stop-Process\n</code></pre>"},{"location":"run_command/","title":"Ex\u00e9cuter des commandes","text":""},{"location":"run_command/#syntaxe-des-commandes","title":"Syntaxe des commandes","text":"<p> Toutes les commandes PowerShell, appel\u00e9s CmdLets se composent d\u2019un verbe et d\u2019un nom s\u00e9par\u00e9 par un tiret. Le r\u00e9sultat de la commande peut \u00eatre influencer par l'ajout de param\u00e8tres.</p> <p>Par exemple, la commande <code>Get-Service</code> ex\u00e9cut\u00e9e telle quelle, renverra l'ensemble des services.</p> <p>Tandis que la commande <code>Get-Service -Name *Net*</code> ne renverra que les services contenant net dans leur nom.</p> <p>Chaque verbe correspond \u00e0 un type d'action pr\u00e9cis :</p> Verb Action GET  Requeter SET Configurer / D\u00e9finir IMPORT Importer etc ... ... <p> </p> <p><code>Get-Verb</code> permet d'obtenir la liste des verbs approuv\u00e9s par les best-practices Powershell</p>"},{"location":"run_command/#les-3-commandes-indispensables","title":"Les 3 commandes indispensables","text":""},{"location":"run_command/#get-command","title":"Get-Command","text":"<p><code>Get-Command</code> permet de rechercher une commande en fonction de nom, de son verb ou de son module d'appartenance.</p> <pre><code>Get-Command -Name \"*process*\"\n</code></pre> Output<pre><code>CommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nCmdlet          Debug-Process                                      7.0.0.0    Microsoft.PowerShell.Management\nCmdlet          Enter-PSHostProcess                                7.3.4.500  Microsoft.PowerShell.Core\nCmdlet          Exit-PSHostProcess                                 7.3.4.500  Microsoft.PowerShell.Core\nCmdlet          Get-Process                                        7.0.0.0    Microsoft.PowerShell.Management\nCmdlet          Get-PSHostProcessInfo                              7.3.4.500  Microsoft.PowerShell.Core\nCmdlet          Start-Process                                      7.0.0.0    Microsoft.PowerShell.Management\nCmdlet          Stop-Process                                       7.0.0.0    Microsoft.PowerShell.Management\nCmdlet          Wait-Process                                       7.0.0.0    Microsoft.PowerShell.Management\n</code></pre>"},{"location":"run_command/#get-help","title":"Get-Help","text":"<p>La commande <code>Get-Help</code> permet d'obtenir une aide sur le fonctionnement d'une commande.</p> <p>Elle vous permet d'identifier les param\u00e8tres attendues, lesquels sont obligatoires ou non, le type de valeurs \u00e0 leur envoyer, etc ...</p> <pre><code>Get-Help -Name \"Get-Service\"\n</code></pre> Output<pre><code>NAME\n    Get-Service\n\nSYNTAX\n    Get-Service [[-Name] &lt;string[]&gt;] [-DependentServices] [-RequiredServices] [-Include &lt;string[]&gt;] [-Exclude &lt;string[]&gt;] [&lt;CommonParameters&gt;]\n\n    Get-Service -DisplayName &lt;string[]&gt; [-DependentServices] [-RequiredServices] [-Include &lt;string[]&gt;] [-Exclude &lt;string[]&gt;] [&lt;CommonParameters&gt;]\n\n    Get-Service [-DependentServices] [-RequiredServices] [-Include &lt;string[]&gt;] [-Exclude &lt;string[]&gt;] [-InputObject &lt;ServiceController[]&gt;] [&lt;CommonParameters&gt;]\n\nALIASES\n    gsv\n\nREMARKS\n    Get-Help cannot find the Help files for this cmdlet on this computer. It is displaying only partial help.\n        -- To download and install Help files for the module that includes this cmdlet, use Update-Help.\n        -- To view the Help topic for this cmdlet online, type: \"Get-Help Get-Service -Online\" or\n           go to https://go.microsoft.com/fwlink/?LinkID=2096496.\n</code></pre> <p> </p> <p>L'ajout du param\u00e8tre -Online \u00e0 la commande <code>Get-Help</code>vous envoie sur la page Microsoft Docs correspondante.</p>"},{"location":"run_command/#get-member","title":"Get-Member","text":"<p><code>Get-Help</code> vous permet d'obtenir \"la carte d'identit\u00e9\" d'un objet obtenu par l'\u00e9x\u00e9cution d'une commande ou stock\u00e9 dans une variable. Elle vous permettra de connaitre:</p> <ul> <li>Son type</li> <li>Ses propri\u00e9t\u00e9s</li> <li>Ses m\u00e9thodes</li> </ul> <pre><code>Get-Process | Get-Member\n</code></pre> Output \u2771<pre><code>   TypeName: System.Diagnostics.Process\n\nName                       MemberType     Definition\n----                       ----------     ----------\nDisposed                   Event          System.EventHandler Disposed(System.Object, System.EventArgs)\nErrorDataReceived          Event          System.Diagnostics.DataReceivedEventHandler ErrorDataReceived(System.Object, System.Diagnostics.\u2026\nExited                     Event          System.EventHandler Exited(System.Object, System.EventArgs)\nOutputDataReceived         Event          System.Diagnostics.DataReceivedEventHandler OutputDataReceived(System.Object, System.Diagnostics\u2026\nBeginErrorReadLine         Method         void BeginErrorReadLine()\nBeginOutputReadLine        Method         void BeginOutputReadLine()\nCancelErrorRead            Method         void CancelErrorRead()\nCancelOutputRead           Method         void CancelOutputRead()\nClose                      Method         void Close()\nCloseMainWindow            Method         bool CloseMainWindow()\nDispose                    Method         void Dispose(), void IDisposable.Dispose()\nEquals                     Method         bool Equals(System.Object obj)\nGetHashCode                Method         int GetHashCode()\nGetLifetimeService         Method         System.Object GetLifetimeService()\nGetType                    Method         type GetType()\nInitializeLifetimeService  Method         System.Object InitializeLifetimeService()\nKill                       Method         void Kill(), void Kill(bool entireProcessTree)\nRefresh                    Method         void Refresh()\nStart                      Method         bool Start()\nToString                   Method         string ToString()\n</code></pre> Verb Description <code>Get-Command</code>  Lister et chercher des commandes <code>Get-Help</code>  Obtenir l'aide d'une commande <code>Get-Member</code>  Connaitre le type, les propri\u00e9t\u00e9s et les m\u00e9thodes d\u2019un objet"},{"location":"test/","title":"Test Syntaxe Powershell","text":"Solution <pre><code>#Le r\u00e9sultat d'une commande peut etre enregistr\u00e9 dans une commande\n$Process = Get-Process -name \"Notepad\"\n</code></pre> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <pre><code>graph LR\n    A(Get-Command) --&gt; B(Get-Help) --&gt; C(Get-Member)</code></pre> <ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul> <p>AltGr+6</p> <p><code>mkdocs-material</code></p> <p><code>Get-Verb</code> function is used to generate a sequence of numbers. <code>$</code> $</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>Get-Verb</code>      Delete resource"},{"location":"variables/","title":"Les variables","text":"<ul> <li>La variable est un emplacement m\u00e9moire. Elle se compose de 3 \u00e9l\u00e9ments :<ul> <li>Un nom</li> <li>Un type </li> <li>Une valeur</li> </ul> </li> </ul> <p>Sous PowerShell, une variable est pr\u00e9c\u00e9d\u00e9e du signe : $ </p> <p>Le contenu d'une variable peut \u00eatre une valeur unique, ou une collection d'objets</p>"},{"location":"variables/#assignation-de-variables","title":"Assignation de variables","text":"<p>L'assignation d'une variable se fait avec le symbole =</p> <pre><code>$Variable = \"ma variable\"\n</code></pre> <p>Le r\u00e9sultat d'une commande peut \u00eatre stock\u00e9 dans une variable de la m\u00eame mani\u00e8re</p> <pre><code>$Process = Get-Process -name \"Notepad\"\n</code></pre> <p>Powershell d\u00e9termine le type de la variable en fonction de la syntaxe avec laquelle elle est d\u00e9finie</p> <pre><code>$Variable = 1\n$Variable | Get-Member\n</code></pre> Output \u2771<pre><code>   TypeName: System.Int32\n\n...\n</code></pre> <pre><code>$Variable = \"1\"\n$Variable | Get-Member\n</code></pre> Output \u2771<pre><code>   TypeName: System.String\n\n...\n</code></pre>"},{"location":"variables/#forcer-le-typage","title":"Forcer le typage","text":"<p>Il peut \u00eatre n\u00e9cc\u00e9ssaire d'avoir \u00e0 forcer le type d'une variable. Pour cela on pr\u00e9cise le type voulu entre [ ] avant le nom de la variable.</p> <pre><code>[string]$Variable = 1               # Int en string\n[int]$Variable = \"1\"                # String en int\n[char]$Char = 0201                  # Valeur ASCII en charact\u00e8re\n[datetime]$variable = \"10/12/1984\"  # String en Date\n</code></pre>"},{"location":"variables/#proprietes-et-methodes","title":"Propri\u00e9t\u00e9s et m\u00e9thodes","text":"<p>Les propri\u00e9t\u00e9s et les m\u00e9thodes de l'objet stock\u00e9 en variable pourront \u00eatre appel\u00e9 par un .</p> <pre><code>$Variable\u00a0=\u00a0\"Ceci\u00a0est\u00a0une\u00a0phrase\"\n$Variable.Length\n$Variable.ToUpper()\n</code></pre> <pre><code>$Process\u00a0=\u00a0Get-Process\u00a0notepad\u00a0\n$Process.ID\n$Process.Kill()\n</code></pre>"},{"location":"variables/#utilisation-dans-une-commande","title":"Utilisation dans une commande","text":"<p>Une variable ou seulement ses propri\u00e9t\u00e9s pourront \u00eatre utilis\u00e9s dans une commande</p> <pre><code>$Date\u00a0=\u00a0Get-Date\u00a0\"28/09/2021\"\nGet-EventLog\u00a0-LogName\u00a0Application\u00a0-After\u00a0$Date\n</code></pre> <pre><code>$Service\u00a0=\u00a0Get-Service\u00a0\"Spooler\"\n\"Spooler\u00a0service\u00a0is\u00a0$($Service.Status)\"\n</code></pre>"},{"location":"variables/array/","title":"Array","text":"<p>Une array est une liste de valeur</p> <pre><code>$ArrayOfInts\u00a0=\u00a01,2,3,4\u00a0\n$ArrayOfStrings\u00a0=\u00a0\"Un\",\"Deux\",\"Trois\",\"Quatre\"\n</code></pre>"},{"location":"variables/array/#indexage-dans-une-liste","title":"Indexage dans une liste","text":"S\u00e9lectionner le premier \u00e9l\u00e9ment de la liste<pre><code>$ArrayOfInts\u00a0[0]\n</code></pre> S\u00e9lectionner le dernier \u00e9l\u00e9ment de la liste<pre><code>$ArrayOfInts\u00a0[-1]\n</code></pre> Utiliser une variable comme index<pre><code>$int\u00a0=\u00a01\n$ArrayOfInts\u00a0[$int]\n</code></pre> S\u00e9lectionner une plage dans la liste<pre><code>$ArrayOfInts\u00a0[0..2]\n</code></pre>"},{"location":"variables/hashtable/","title":"Hashtable","text":"<p>Une Hashtable est un tableau de correspondance cl\u00e9/valeur</p> <pre><code>$Environemment=\u00a0@{PROD=\u00a0\"SERVER-PROD\";\u00a0DEV\u00a0=\u00a0\"SERVER-DEV\"; HOM =\u00a0\"SERVER-HOM\"}\n</code></pre> <p>Les valeurs peuvent alors \u00eatre appel\u00e9s en utilisant leur cl\u00e9</p> <pre><code>$Environemment[\"PROD\"]\n</code></pre> Output \u2771<pre><code>\"SERVER-PROD\"\n</code></pre>"},{"location":"variables/pscustom/","title":"PSCustomObject","text":"<p>Le PSCustomObject permet la cr\u00e9ation d'un objet personnalis\u00e9 dans lequel on pourra d\u00e9finire l'ensemble de ses propri\u00e9t\u00e9s</p> <pre><code>$Computer=\u00a0[PSCustomObject]@{\nName=\u00a0\"HAL9000\"\nOS\u00a0=\u00a0\"Windows\u00a03.11\"\nDisks\u00a0=\u00a0\"256Mo\"\n}\n</code></pre> <p>Il est possible de compl\u00e9ter l'objet via l'utilisation de la commande <code>Add-Member</code></p> <pre><code>$Computer|\u00a0Add-Member\u00a0-MemberType\u00a0NoteProperty\u00a0-Name\u00a0RAM\u00a0-Value\u00a0\"512Mo\n</code></pre> <p>Les propri\u00e9t\u00e9s peuvent alors \u00eatre appel\u00e9s comme n'importe quel autre objet</p> <pre><code>$Computer.Name\n</code></pre> Output \u2771<pre><code>\"HAL9000\"\n</code></pre>"}]}